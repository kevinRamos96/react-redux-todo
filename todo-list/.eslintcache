[{"/Users/cait02/Desktop/Begin/React/todo-list/src/index.js":"1","/Users/cait02/Desktop/Begin/React/todo-list/src/App.js":"2","/Users/cait02/Desktop/Begin/React/todo-list/src/reportWebVitals.js":"3","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todolist.js":"4","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js":"5","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/store.js":"6","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/reducers/todoReducer.js":"7","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actionTypes.js":"8","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js":"9","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actions.js":"10","/Users/cait02/Desktop/Begin/React/todo-list/src/components/showListItems.js":"11","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskCompletion.js":"12","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskUndo.js":"13","/Users/cait02/Desktop/Begin/React/todo-list/src/components/getDataAPI.js":"14","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createCollection.js":"15"},{"size":575,"mtime":1614030698264,"results":"16","hashOfConfig":"17"},{"size":1822,"mtime":1618258259603,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1611273863802,"results":"19","hashOfConfig":"17"},{"size":4197,"mtime":1617317166770,"results":"20","hashOfConfig":"17"},{"size":1968,"mtime":1617999605747,"results":"21","hashOfConfig":"17"},{"size":198,"mtime":1615934358786,"results":"22","hashOfConfig":"17"},{"size":4851,"mtime":1617997752775,"results":"23","hashOfConfig":"17"},{"size":437,"mtime":1617994983158,"results":"24","hashOfConfig":"17"},{"size":6223,"mtime":1617926963823,"results":"25","hashOfConfig":"17"},{"size":7359,"mtime":1618258227288,"results":"26","hashOfConfig":"17"},{"size":4599,"mtime":1617999715914,"results":"27","hashOfConfig":"17"},{"size":1407,"mtime":1616525281522,"results":"28","hashOfConfig":"17"},{"size":378,"mtime":1616525322900,"results":"29","hashOfConfig":"17"},{"size":495,"mtime":1616445520518,"results":"30","hashOfConfig":"17"},{"size":538,"mtime":1617135188812,"results":"31","hashOfConfig":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"l2w0iu",{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"35"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"pwmhm8","/Users/cait02/Desktop/Begin/React/todo-list/src/index.js",[],["74","75"],"/Users/cait02/Desktop/Begin/React/todo-list/src/App.js",["76","77","78","79","80"],"/Users/cait02/Desktop/Begin/React/todo-list/src/reportWebVitals.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/components/todolist.js",["81","82","83","84","85"],"import React, { Component, useEffect, useState } from 'react';\nimport TodoSubList from './todosublist'\nimport ShowListItem from './showListItems'\nimport CreateTask from './createTask'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport \"../App.css\"\n\n\nconst TodoList = (props) => {\n    const [list, setList] = useState(\"\")\n    const [modal, setModal] = useState(false)\n    const [data, setData] = useState(props.data)\n    const state = useSelector(input => input)\n    const [category, setCategory] = useState(\"\")\n    console.log(\"data from APP.JS\", props.data)\n    console.log(\"data from APP.JS\", data.length)\n    console.log(\"state from APP.JS\", state)\n\n    //change category\n    const changeCategory = (input) => {\n        setCategory(input)\n        setModal(false)\n        console.log(\"cate4gori\", category)\n    }\n    //setModal\n    const toogleModalCategory = () => {\n        setModal(!modal);\n        setCategory(\"\")\n        console.log(\"modal\", modal)\n    }\n    const changeList = (e) => {\n        setList(e.target.value);\n        console.log(\"changeList\", list)\n\n    }\n    //set up state from app.js\n    let content = (\n        <div>\n            <div className=\"main\">\n                <div className=\"main-menu\">\n                    <div className=\"menu-boxes\">\n                        {(data.length > Object.keys(state).length) ?\n                            <>\n                                {Object.keys(data).map(input =>\n                                    <div className=\"btn-box\">\n                                        <button onClick={() => changeCategory(data[input])} >{data[input]}</button>\n                                    </div>\n                                )}\n                            </>\n                            :\n                            <>\n                                {\n                                    (Object.keys(state).length > 0) ?\n                                        <>\n                                            {Object.keys(state).map(input =>\n                                                <div className=\"btn-box\">\n                                                    <button onClick={() => changeCategory(input)} >{input}</button>\n                                                </div>\n                                            )}\n                                        </>\n\n                                        :\n\n                                        <></>\n\n                                }\n                            </>\n                        }\n\n                    </div>\n                    <div className=\"footer\">\n                        <div className=\"footer-box\">\n                            <button type=\"submit\" onClick={() => toogleModalCategory()}>Add Task</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"main-content\">\n                    {(data.length === 0 && Object.keys(state).length === 0) ?\n                        <>\n\n                            {console.log(\"if data is emplty modal is\", modal)}\n                            <CreateTask\n                                content={\n                                    <input value={list} onChange={(e) => changeList(e)}></input>\n                                }\n                                closeModal={toogleModalCategory}\n                                category={category}>\n\n                            </CreateTask>\n                        </>\n                        :\n                        <>\n                            {modal && <CreateTask\n                                content={\n                                    <input value={list} onChange={(e) => changeList(e)}></input>\n                                }\n                                closeModal={toogleModalCategory}\n                                category={category}\n                            />}\n\n                        </>\n\n                    }\n                    {category !== \"\" && <ShowListItem\n                        category={category}\n\n                    />}\n\n\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n    return content\n}\n\n\nexport default TodoList;","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js",["86","87","88","89","90"],"import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport { stepCompleted, taskCompleted, stepUndo, deleteTask } from \"../redux/actions\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport taskCompletion from \"./taskCompletion\"\nimport taskUndo from \"./taskUndo\"\nimport \"../App.css\"\n\n\n\nconst TodoSubList = ({ propsParent, props }) => {\n    const dispatch = useDispatch()\n    console.log(\"props\", props)\n\n    if (Object.keys(props).length >= 1) {\n        let container =\n            Object.keys(props).map(input =>\n\n                <div className='container'>\n                    {console.log(\"propsStep\", props[input].step)}\n\n                    <div className=\"subitem1-container \">\n                        {props[input].step}\n                    </div>\n                    <div className=\"subitem1-container \">\n                        {props[input].dateBS}\n                    </div>\n                    <div className=\"subitem1-container \">\n                        <div className=\"filler\" style={{ width: `${props[input].completedS * 100}%` }}>\n                            {console.log(\"completedS\", props[input].completedS)}\n                        </div>\n                    </div>\n\n                    <div className=\"subitem1-container \">\n                        {props[input].completedS ?\n                            <>\n                                <button type=\"submit\" onClick={() => dispatch(stepUndo(propsParent, props[input], taskUndo(propsParent, props)))}>Undo</button>\n                            </>\n                            :\n                            <button type=\"submit\" onClick={() => dispatch(stepCompleted(propsParent, props[input], taskCompletion(propsParent, props)))}>Complete</button>\n\n                        }\n\n                    </div>\n\n                </div>\n            )\n        console.log(\"returning\")\n        return container\n    }\n    return null\n}\n\n\n\nexport default TodoSubList;","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/store.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/redux/reducers/todoReducer.js",["91","92","93","94"],"import axios from \"axios\";\nimport { ADD_TODO, SHOW, ADD_TODO_SLAVE, STEP_COMPLETED, COMPLETED, STEP_UNDO, POST_TASK, ADD_STATE, DELETE_TASK } from \"../actionTypes\"\n\nconst initialState = {\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO: {\n            const { task, date } = action.payload;\n            return {\n\n                ...state,\n                [task]: {\n                    ...action.payload,\n                    task: task,\n                    date: date\n                }\n            }\n        }\n\n        case ADD_STATE: {\n            const { task, category, steps, dateB, } = action.payload;\n            // const task = action.payload.task\n            // const steps = action.payload.steps\n            // const dateB = action.payload.dateB\n\n            console.log(\"action.payload\", task, steps, dateB, action.payload)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        task: task,\n                        category: category,\n                        dateB: dateB,\n                        steps: steps\n                    }\n                }\n\n            }\n        }\n\n        case SHOW: {\n            const { task, show, category } = action.payload\n            console.log(\"inside SHOW category\", category)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        show: !show\n                    }\n                }\n\n\n            }\n        }\n\n        case STEP_COMPLETED: {\n            const { task, steps, category } = action.payload\n            const completed = action.newCompleted\n            const newDate = action.newDate\n            if (action.stepFinder !== null) {\n                const { step } = action.stepFinder\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n                            dateE: newDate,\n                            steps: {\n                                ...steps, [step]: { ...action.stepFinder, completedS: 1 },\n                            }\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        dateE: newDate,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n        case STEP_UNDO: {\n            const { task, steps, category } = action.payload\n            const newDate = action.newDate\n            const completed = action.newCompleted\n            console.log(\"insde reducer completed\", completed)\n            if (action.stepFinder !== null) {\n                const { step } = action.stepFinder\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n                            dateE: newDate,\n                            steps: {\n                                ...steps, [step]: { ...action.stepFinder, completedS: 0 },\n                            }\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        dateE: newDate,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n        case DELETE_TASK: {\n            const { task, category } = action.payload\n            console.log(\"inside DELETE_TASK task received\", task)\n            console.log(\"inside DELETE_TASK\", state[category])\n            const temp = state[category]\n            const newState = Object.keys(temp).reduce((object, input) => {\n                console.log(\"inside reduce\", temp[input].task)\n                if (temp[input].task !== task) {\n                    object[input] = temp[input]\n                }\n                return object\n            }, {})\n            console.log(newState)\n            return { ...state, [category]: newState }\n        }\n\n\n        default: return state\n    }\n\n}\n\n\n\nexport default reducer","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actionTypes.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js",["95","96","97","98"],"import { Component, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addTodo, addTodoSlave, getTask, postTaskSteps } from \"../redux/actions\"\nimport { postTask } from \"../redux/actions\";\nimport '../css/modal.css'\n\nconst CreateTask = (props) => {\n    const [task, setTask] = useState(null)\n    const [subT, setSubT] = useState(null)\n    const [subList, setSubList] = useState(\"\")\n    const [butState, setButState] = useState(false)\n    const [categoryData, setCategoryData] = useState(\"\")\n    const dispatch = useDispatch()\n    const testState = useSelector(state => state)\n    console.log(\"testState\", testState)\n    const date = new Date()\n    const taskDate = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n\n    const formCategory = (e) => {\n        console.log(\"category\", categoryData);\n        setCategoryData(e.target.value);\n    }\n    const formTask = (e) => {\n        console.log(\"target\", e.target.value)\n        setTask(e.target.value)\n        console.log(\"target\", task)\n\n    }\n\n\n    const formSubt = (e) => {\n        setSubT(e.target.value)\n        console.log(\"subT\", subT)\n    }\n\n    //Add a subTASK to subList with two conditions when it is the first subtask to be added and then where thre is not the first one\n    const addSubTask = () => {\n\n        if (subList === null) {\n            setSubList({\n                [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"if addSubTask\", subList)\n            setSubT(\"\")\n            console.log(\"ifsubt\", subT)\n\n        }\n\n        else {\n            console.log(\"else\", subT)\n            console.log(\"else addSubTask\", subList)\n            setSubList({\n                ...subList, [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"subList\", subList)\n            setSubT(\"\")\n\n        }\n\n\n\n\n    }\n\n    const dispatchAddTodo = () => {\n        // dispatch(addTodo(task, taskDate))\n        dispatch(postTask(categoryData, task, taskDate))\n        props.closeModal()\n    }\n    //Set state for task and subList to null\n    const dispatchAddTodoSlave = () => {\n        dispatch(addTodoSlave(categoryData, task, subList, taskDate))\n        dispatch(postTaskSteps(categoryData, task, taskDate, subList))\n        setTask(\"\");\n        setSubList(\"\");\n        setButState(false)\n        setCategoryData(\"\");\n        props.closeModal()\n    }\n    const butSet = () => {\n        setButState(!butState)\n\n    }\n    //When user deletes subStep perform a reducer on the sublist obj, save it on a newSublist const and set it to subList\n    const deleteSubTask = (input) => {\n        console.log(\"deleting step\", input)\n        const newSubList = Object.keys(subList).reduce((object, helper) => {\n            if (subList[helper] !== input) {\n                console.log(\"sublist\", subList[helper])\n                object[helper] = subList[helper]\n            }\n            return object\n        }, {}\n        )\n        console.log(\"newSubList\", newSubList)\n        setSubList(newSubList)\n        console.log(\"subListFromDelete\", subList)\n    }\n\n    let container = (<div className=\"box\">\n        <div className=\"close-icon\" onClick={props.closeModal}>X</div>\n        {!butState ? <>\n            <div className=\"boxTitle\">\n                <input value={task} placeholder=\"Input step Name\" onChange={(e) => formTask(e)}></input>\n                <input value={categoryData} list=\"catOptions\" placeholder=\"Input Category Name\" onChange={(e) => formCategory(e)}></input>\n\n                <datalist id=\"catOptions\" >\n                    {Object.keys(testState).map(input =>\n\n                        <option>{input}</option>\n\n                    )\n                    }\n                </datalist>\n\n            </div>\n            <div className=\"buttonBox\">\n                <button type='submit' onClick={() => dispatchAddTodo()}>Add Task</button>\n                <button type=\"submit\" onClick={() => butSet()}>CreateSubTask</button>\n            </div>\n\n        </>\n            :\n            <>\n                <div className=\"boxTitle\">\n                    <input value={task} placeholder=\"Input step Name\" onChange={(e) => formTask(e)}></input>\n                    <input value={categoryData} placeholder=\"Input Category Name\" onChange={(e) => formCategory(e)}></input>\n\n                    {subList === null ?\n                        <>\n                            {console.log(\"inside true sublist\")}\n                            <div className=\"box-Title-inside\">\n                                <input value={subT} placeholder=\"Input step Name\" onChange={(e) => formSubt(e)}></input>\n                                <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                            </div>\n\n                        </>\n                        :\n                        <>\n                            <>\n                                {Object.keys(subList).map(input => <div className=\"box-Title-inside\">\n                                    <input readOnly value={subList[input].step}></input>\n                                    <button type=\"submit\" onClick={() => deleteSubTask(subList[input])}>Delete Step</button>\n                                </div>)}\n                                <div className=\"box-Title-inside\">\n                                    <input value={subT} onChange={(e) => formSubt(e)}></input>\n                                    <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                                </div>\n                            </>\n                        </>\n                    }\n                </div>\n                <div className=\"buttonBox\">\n                    <button type='submit' onClick={() => dispatchAddTodoSlave()}>Add Task</button>\n                    <button type=\"submit\" onClick={() => butSet()}>DeleteAllSubTask</button>\n                </div>\n            </>}\n\n\n        <br></br>\n\n    </div>)\n\n    return container\n\n\n}\n\nexport default CreateTask","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actions.js",["99","100","101","102","103","104","105","106","107","108"],"/Users/cait02/Desktop/Begin/React/todo-list/src/components/showListItems.js",["109","110","111","112","113","114","115"],"import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { deleteTask, deleteTaskNOAPI, getStateFromApi, getTask, stepCompleted, stepUndo, toogleShow, toogleShowAPI, updateShowAPI } from \"../redux/actions\"\nimport TodoSubList from './todosublist'\nimport \"../css/progress.css\"\n\n\n\nconst ShowListItem = (props) => {\n    const dispatch = useDispatch()\n    const tempState = useSelector(state => state)\n    const selector = tempState[props.category]\n    console.log(\"props category\", props.category)\n    console.log(\"selector state\", selector)\n    console.log(\"props category array\", selector[props.category])\n    //update state show on database\n    const toogleUpdate = (input) => {\n        dispatch(toogleShow(input))\n        dispatch(toogleShowAPI(input))\n        console.log(\"input show\", input)\n    }\n    if (Object.keys(selector).length >= 1) {\n        console.log(\"inside showItem\", selector)\n        console.log(\"using selector len\", Object.keys(selector))\n\n        let mapper =\n            Object.keys(selector).map(input =>\n\n                <div className=\"holder\">\n                    {console.log(\"input\", selector[input])}\n\n                    {(Object.keys(selector[input].steps).length == 0) ?\n\n                        <>\n                            <div className=\"container\">\n\n                                <div className=\"item2\">{selector[input].task}\n                                    <div className=\"button-class\">\n                                        {selector[input].completed === 1 ?\n                                            <>\n                                                <button type='submit' onClick={() => (dispatch(stepUndo(selector[input], null, 0)))}  >Undo</button>\n                                                <button type='submit' onClick={() => dispatch(deleteTask(selector[input]))}>Remove</button>\n                                            </>\n                                            :\n                                            <button type='submit' onClick={() => (dispatch(stepCompleted(selector[input], null, 1)))}  >Completed</button>\n                                        }\n\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateB}</div>\n                                <div className=\"item2\">\n                                    <div className=\"filler\" style={{ width: `${selector[input].completed * 100}%` }}>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateE}</div>\n                            </div>\n                        </>\n\n                        :\n                        <>\n                            <div className=\"container\">\n\n                                <div className=\"item2\">{selector[input].task}\n                                    <div className=\"button-class\">\n                                        <>\n                                            <button type='submit' onClick={() => (toogleUpdate(selector[input]))}  >ShowSteps</button>\n                                            {selector[input].completed === 1 &&\n                                                <button type='submit' onClick={() => dispatch(deleteTask(selector[input]))}>Remove</button>\n                                            }\n                                        </>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateB}</div>\n                                <div className=\"item2\">\n                                    <div className=\"filler\" style={{ width: `${selector[input].completed * 100}%` }}>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateE}</div>\n                            </div>\n                            {console.log(\"input.date\", selector[input].dateB)}\n                            {console.log(\"input.steps\", selector[input].steps)}\n\n                            <div>{(Object.keys(selector[input].steps).length >= 1 && selector[input].show === true) && <TodoSubList propsParent={selector[input]} props={selector[input].steps} />}\n                            </div>\n\n\n                        </>\n                    }\n\n                </div>\n            )\n        return mapper\n    }\n    return null\n}\n\nexport default ShowListItem","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskCompletion.js",["116","117","118","119","120","121"],"import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { toogleShow } from \"../redux/actions\"\n\nconst taskCompletion = (parent, child) => {\n    let index = 0, counter = 1, result = 0\n    Object.keys(child).map(input => {\n        //index counts the number of steps, while counter the number of completed steps\n        index = index + 1\n        /** We know that every time we dispatch we have completed a step therfore we need to\n         * take in account that our counter(steps completed) should start in 1 however it\n         * cannot exceeed the length of the number steps therefore we set the counter to be \n         * less than the number of steps if not on the last render it will make the widht >100%\n         */\n        if (child[input].completedS > 0 && counter < Object.keys(child).length) {\n            counter = (counter + 1)\n            console.log(\"result for counter\", counter)\n\n        }\n    })\n    if (counter > 0) {\n        result = (counter / index)\n        console.log(\"result for new state\", result)\n        return result\n    }\n    console.log(\"result for index\", index)\n\n    console.log(\"result for new state\", result)\n    //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n    //we need to account for it by doing 1(completedtask)/index(number of steps)\n}\n\nexport default taskCompletion","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskUndo.js",["122"],"const taskUndo = (parent, child) => {\n    let index = 0, counter = Object.keys(child).length - 1, result = 0\n    Object.keys(child).map(input => {\n        index++\n        if (child[input].completedS === 0 && counter > -1) {\n            counter -= 1\n        }\n    })\n    result = counter / index\n    console.log(\"new result \", result)\n    return result\n}\n\nexport default taskUndo","/Users/cait02/Desktop/Begin/React/todo-list/src/components/getDataAPI.js",["123"],"import { useDispatch, useSelector } from 'react-redux'\nimport { getTask } from '../redux/actions'\n\nconst GetDataFromAPI = () => {\n    const dispatch = useDispatch()\n    // const selector = useSelector(state => state)\n    //create redux state if there is data on the dB\n    dispatch(getTask())\n    //console.log(\"getDataAPI.js Data\", data)\n    // data.map(input => console.log(\"data input map\", input))\n    //console.log(\"getDataAPI.js\", selector)\n    return null\n}\n\nexport default GetDataFromAPI","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createCollection.js",["124","125"],"import React, { Component, useState } from \"react\"\nimport '../css/modal.css'\n\nconst CreateCollection = (props) => {\n    return (\n        <div className=\"popUp\">\n            <div className=\"box\">\n                <div className=\"close-icon\" onClick={props.closeModal}>x</div>\n                <div className=\"boxTitle\">Type Name of New Table\n                </div>\n                <div className=\"boxTitle\">\n                    {props.content}\n                </div>\n\n            </div>\n        </div>\n    )\n}\nexport default CreateCollection",["126","127"],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":2,"column":17,"nodeType":"134","messageId":"135","endLine":2,"endColumn":26},{"ruleId":"132","severity":1,"message":"136","line":9,"column":9,"nodeType":"134","messageId":"135","endLine":9,"endColumn":13},{"ruleId":"132","severity":1,"message":"137","line":49,"column":9,"nodeType":"134","messageId":"135","endLine":49,"endColumn":14},{"ruleId":"132","severity":1,"message":"138","line":53,"column":9,"nodeType":"134","messageId":"135","endLine":53,"endColumn":16},{"ruleId":"139","severity":1,"message":"140","line":57,"column":88,"nodeType":"141","messageId":"142","endLine":57,"endColumn":89,"fix":"143"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"144","line":1,"column":28,"nodeType":"134","messageId":"135","endLine":1,"endColumn":37},{"ruleId":"132","severity":1,"message":"145","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":19},{"ruleId":"132","severity":1,"message":"146","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":21},{"ruleId":"132","severity":1,"message":"147","line":12,"column":18,"nodeType":"134","messageId":"135","endLine":12,"endColumn":25},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"148","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":12},{"ruleId":"132","severity":1,"message":"149","line":3,"column":25,"nodeType":"134","messageId":"135","endLine":3,"endColumn":38},{"ruleId":"132","severity":1,"message":"150","line":3,"column":50,"nodeType":"134","messageId":"135","endLine":3,"endColumn":60},{"ruleId":"132","severity":1,"message":"151","line":4,"column":23,"nodeType":"134","messageId":"135","endLine":4,"endColumn":34},{"ruleId":"132","severity":1,"message":"152","line":1,"column":8,"nodeType":"134","messageId":"135","endLine":1,"endColumn":13},{"ruleId":"132","severity":1,"message":"153","line":2,"column":26,"nodeType":"134","messageId":"135","endLine":2,"endColumn":40},{"ruleId":"132","severity":1,"message":"154","line":2,"column":58,"nodeType":"134","messageId":"135","endLine":2,"endColumn":67},{"ruleId":"132","severity":1,"message":"155","line":2,"column":80,"nodeType":"134","messageId":"135","endLine":2,"endColumn":89},{"ruleId":"132","severity":1,"message":"133","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":19},{"ruleId":"132","severity":1,"message":"144","line":1,"column":31,"nodeType":"134","messageId":"135","endLine":1,"endColumn":40},{"ruleId":"132","severity":1,"message":"156","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":17},{"ruleId":"132","severity":1,"message":"157","line":3,"column":33,"nodeType":"134","messageId":"135","endLine":3,"endColumn":40},{"ruleId":"132","severity":1,"message":"154","line":1,"column":26,"nodeType":"134","messageId":"135","endLine":1,"endColumn":35},{"ruleId":"132","severity":1,"message":"155","line":1,"column":80,"nodeType":"134","messageId":"135","endLine":1,"endColumn":89},{"ruleId":"132","severity":1,"message":"158","line":1,"column":91,"nodeType":"134","messageId":"135","endLine":1,"endColumn":105},{"ruleId":"132","severity":1,"message":"146","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":53,"column":25,"nodeType":"161","messageId":"162","endLine":53,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":55,"column":28,"nodeType":"165","messageId":"166","endLine":55,"endColumn":30},{"ruleId":"163","severity":1,"message":"167","line":137,"column":27,"nodeType":"165","messageId":"166","endLine":137,"endColumn":29},{"ruleId":"168","severity":1,"message":"169","line":172,"column":95,"nodeType":"165","messageId":"170","endLine":172,"endColumn":96},{"ruleId":"168","severity":1,"message":"169","line":208,"column":95,"nodeType":"165","messageId":"170","endLine":208,"endColumn":96},{"ruleId":"139","severity":1,"message":"140","line":231,"column":94,"nodeType":"141","messageId":"142","endLine":231,"endColumn":95,"fix":"171"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":19},{"ruleId":"132","severity":1,"message":"172","line":1,"column":21,"nodeType":"134","messageId":"135","endLine":1,"endColumn":29},{"ruleId":"132","severity":1,"message":"173","line":3,"column":22,"nodeType":"134","messageId":"135","endLine":3,"endColumn":37},{"ruleId":"132","severity":1,"message":"174","line":3,"column":39,"nodeType":"134","messageId":"135","endLine":3,"endColumn":54},{"ruleId":"132","severity":1,"message":"157","line":3,"column":56,"nodeType":"134","messageId":"135","endLine":3,"endColumn":63},{"ruleId":"132","severity":1,"message":"175","line":3,"column":117,"nodeType":"134","messageId":"135","endLine":3,"endColumn":130},{"ruleId":"163","severity":1,"message":"167","line":32,"column":65,"nodeType":"165","messageId":"166","endLine":32,"endColumn":67},{"ruleId":"132","severity":1,"message":"133","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":19},{"ruleId":"132","severity":1,"message":"172","line":1,"column":21,"nodeType":"134","messageId":"135","endLine":1,"endColumn":29},{"ruleId":"132","severity":1,"message":"146","line":2,"column":10,"nodeType":"134","messageId":"135","endLine":2,"endColumn":21},{"ruleId":"132","severity":1,"message":"151","line":2,"column":23,"nodeType":"134","messageId":"135","endLine":2,"endColumn":34},{"ruleId":"132","severity":1,"message":"176","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":7,"column":34,"nodeType":"161","messageId":"162","endLine":7,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":3,"column":34,"nodeType":"161","messageId":"162","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"151","line":1,"column":23,"nodeType":"134","messageId":"135","endLine":1,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"172","line":1,"column":28,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"128","replacedBy":"177"},{"ruleId":"130","replacedBy":"178"},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'todo' is assigned a value but never used.","'fetch' is assigned a value but never used.","'updater' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"181","text":"182"},"'useEffect' is defined but never used.","'TodoSubList' is defined but never used.","'useDispatch' is defined but never used.","'setData' is assigned a value but never used.","'Grid' is defined but never used.","'taskCompleted' is defined but never used.","'deleteTask' is defined but never used.","'useSelector' is defined but never used.","'axios' is defined but never used.","'ADD_TODO_SLAVE' is defined but never used.","'COMPLETED' is defined but never used.","'POST_TASK' is defined but never used.","'addTodo' is defined but never used.","'getTask' is defined but never used.","'POST_TASK_SUCC' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"range":"183","text":"184"},"'useState' is defined but never used.","'deleteTaskNOAPI' is defined but never used.","'getStateFromApi' is defined but never used.","'updateShowAPI' is defined but never used.","'toogleShow' is defined but never used.",["179"],["180"],"no-global-assign","no-unsafe-negation",[1483,1491],"\n      .",[7087,7097],"\n        ."]