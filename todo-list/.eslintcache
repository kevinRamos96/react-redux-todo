[{"/Users/cait02/Desktop/Begin/React/todo-list/src/index.js":"1","/Users/cait02/Desktop/Begin/React/todo-list/src/App.js":"2","/Users/cait02/Desktop/Begin/React/todo-list/src/reportWebVitals.js":"3","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todolist.js":"4","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js":"5","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/store.js":"6","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/reducers/todoReducer.js":"7","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actionTypes.js":"8","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js":"9","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actions.js":"10","/Users/cait02/Desktop/Begin/React/todo-list/src/components/showListItems.js":"11","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskCompletion.js":"12","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskUndo.js":"13","/Users/cait02/Desktop/Begin/React/todo-list/src/components/getDataAPI.js":"14","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createCollection.js":"15"},{"size":575,"mtime":1614030698264,"results":"16","hashOfConfig":"17"},{"size":1795,"mtime":1617925415690,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1611273863802,"results":"19","hashOfConfig":"17"},{"size":4197,"mtime":1617317166770,"results":"20","hashOfConfig":"17"},{"size":1968,"mtime":1617999605747,"results":"21","hashOfConfig":"17"},{"size":198,"mtime":1615934358786,"results":"22","hashOfConfig":"17"},{"size":4851,"mtime":1617997752775,"results":"23","hashOfConfig":"17"},{"size":437,"mtime":1617994983158,"results":"24","hashOfConfig":"17"},{"size":6223,"mtime":1617926963823,"results":"25","hashOfConfig":"17"},{"size":7089,"mtime":1617996625098,"results":"26","hashOfConfig":"17"},{"size":4599,"mtime":1617999715914,"results":"27","hashOfConfig":"17"},{"size":1407,"mtime":1616525281522,"results":"28","hashOfConfig":"17"},{"size":378,"mtime":1616525322900,"results":"29","hashOfConfig":"17"},{"size":495,"mtime":1616445520518,"results":"30","hashOfConfig":"17"},{"size":538,"mtime":1617135188812,"results":"31","hashOfConfig":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"l2w0iu",{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"35"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},"pwmhm8","/Users/cait02/Desktop/Begin/React/todo-list/src/index.js",[],["76","77"],"/Users/cait02/Desktop/Begin/React/todo-list/src/App.js",["78","79","80","81","82"],"import './App.css';\nimport React, { Component, useEffect, useState } from \"react\"\nimport TodoList from './components/todolist'\nimport GetDataFromAPI from './components/getDataAPI'\nimport axios from 'axios'\n\nconst App = () => {\n\n  const todo =\n    [{\n      task: \"firts\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: [{\n        miniT: \"test\",\n        completed: true\n      },\n      {\n        miniT: 'test2'\n      }]\n    },\n    {\n      task: \"second\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: [{\n        miniT: \"test\",\n        completed: true\n      },\n      {\n        miniT: 'test2'\n      }]\n    },\n    {\n      task: \"third\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: []\n    }]\n  //Initiate redux state if there is data saved omn DB with GETDataFromAPI() needs to only be run once at the beginning\n  //of the application if it is run other than at the beginning it casuse the app to create an infinite loop of API calls\n  //due to constantly re rendering\n  const fetch = GetDataFromAPI() //initiate redux state\n  const [isLoading, setIsLoading] = useState(true)\n  const [data, setData] = useState(\"\")\n  const [fetcher, setFetcher] = useState(false)\n  const updater = (input) => {\n    setFetcher(input)\n  }\n  useEffect(() => {\n    axios.get(\"http://192.168.22.27:8080/api/getCategories\").\n      then(res => {\n        console.log(\"res.status\", res.status)\n        console.log(res.data);\n        setData(res.data)\n        setIsLoading(false)\n        setFetcher(false)\n      })\n\n  }, [fetcher])\n\n  if (isLoading) {\n    return (<div>LOADING</div>)\n  }\n\n  return (<TodoList\n    data={data}\n  ></TodoList>)\n\n}\n\n\nexport default App;\n","/Users/cait02/Desktop/Begin/React/todo-list/src/reportWebVitals.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/components/todolist.js",["83","84","85","86","87"],"import React, { Component, useEffect, useState } from 'react';\nimport TodoSubList from './todosublist'\nimport ShowListItem from './showListItems'\nimport CreateTask from './createTask'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport \"../App.css\"\n\n\nconst TodoList = (props) => {\n    const [list, setList] = useState(\"\")\n    const [modal, setModal] = useState(false)\n    const [data, setData] = useState(props.data)\n    const state = useSelector(input => input)\n    const [category, setCategory] = useState(\"\")\n    console.log(\"data from APP.JS\", props.data)\n    console.log(\"data from APP.JS\", data.length)\n    console.log(\"state from APP.JS\", state)\n\n    //change category\n    const changeCategory = (input) => {\n        setCategory(input)\n        setModal(false)\n        console.log(\"cate4gori\", category)\n    }\n    //setModal\n    const toogleModalCategory = () => {\n        setModal(!modal);\n        setCategory(\"\")\n        console.log(\"modal\", modal)\n    }\n    const changeList = (e) => {\n        setList(e.target.value);\n        console.log(\"changeList\", list)\n\n    }\n    //set up state from app.js\n    let content = (\n        <div>\n            <div className=\"main\">\n                <div className=\"main-menu\">\n                    <div className=\"menu-boxes\">\n                        {(data.length > Object.keys(state).length) ?\n                            <>\n                                {Object.keys(data).map(input =>\n                                    <div className=\"btn-box\">\n                                        <button onClick={() => changeCategory(data[input])} >{data[input]}</button>\n                                    </div>\n                                )}\n                            </>\n                            :\n                            <>\n                                {\n                                    (Object.keys(state).length > 0) ?\n                                        <>\n                                            {Object.keys(state).map(input =>\n                                                <div className=\"btn-box\">\n                                                    <button onClick={() => changeCategory(input)} >{input}</button>\n                                                </div>\n                                            )}\n                                        </>\n\n                                        :\n\n                                        <></>\n\n                                }\n                            </>\n                        }\n\n                    </div>\n                    <div className=\"footer\">\n                        <div className=\"footer-box\">\n                            <button type=\"submit\" onClick={() => toogleModalCategory()}>Add Task</button>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"main-content\">\n                    {(data.length === 0 && Object.keys(state).length === 0) ?\n                        <>\n\n                            {console.log(\"if data is emplty modal is\", modal)}\n                            <CreateTask\n                                content={\n                                    <input value={list} onChange={(e) => changeList(e)}></input>\n                                }\n                                closeModal={toogleModalCategory}\n                                category={category}>\n\n                            </CreateTask>\n                        </>\n                        :\n                        <>\n                            {modal && <CreateTask\n                                content={\n                                    <input value={list} onChange={(e) => changeList(e)}></input>\n                                }\n                                closeModal={toogleModalCategory}\n                                category={category}\n                            />}\n\n                        </>\n\n                    }\n                    {category !== \"\" && <ShowListItem\n                        category={category}\n\n                    />}\n\n\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n    return content\n}\n\n\nexport default TodoList;","/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js",["88","89","90","91","92"],"import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport { stepCompleted, taskCompleted, stepUndo, deleteTask } from \"../redux/actions\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport taskCompletion from \"./taskCompletion\"\nimport taskUndo from \"./taskUndo\"\nimport \"../App.css\"\n\n\n\nconst TodoSubList = ({ propsParent, props }) => {\n    const dispatch = useDispatch()\n    console.log(\"props\", props)\n\n    if (Object.keys(props).length >= 1) {\n        let container =\n            Object.keys(props).map(input =>\n\n                <div className='container'>\n                    {console.log(\"propsStep\", props[input].step)}\n\n                    <div className=\"subitem1-container \">\n                        {props[input].step}\n                    </div>\n                    <div className=\"subitem1-container \">\n                        {props[input].dateBS}\n                    </div>\n                    <div className=\"subitem1-container \">\n                        <div className=\"filler\" style={{ width: `${props[input].completedS * 100}%` }}>\n                            {console.log(\"completedS\", props[input].completedS)}\n                        </div>\n                    </div>\n\n                    <div className=\"subitem1-container \">\n                        {props[input].completedS ?\n                            <>\n                                <button type=\"submit\" onClick={() => dispatch(stepUndo(propsParent, props[input], taskUndo(propsParent, props)))}>Undo</button>\n                            </>\n                            :\n                            <button type=\"submit\" onClick={() => dispatch(stepCompleted(propsParent, props[input], taskCompletion(propsParent, props)))}>Complete</button>\n\n                        }\n\n                    </div>\n\n                </div>\n            )\n        console.log(\"returning\")\n        return container\n    }\n    return null\n}\n\n\n\nexport default TodoSubList;","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/store.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/redux/reducers/todoReducer.js",["93","94","95","96"],"import axios from \"axios\";\nimport { ADD_TODO, SHOW, ADD_TODO_SLAVE, STEP_COMPLETED, COMPLETED, STEP_UNDO, POST_TASK, ADD_STATE, DELETE_TASK } from \"../actionTypes\"\n\nconst initialState = {\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO: {\n            const { task, date } = action.payload;\n            return {\n\n                ...state,\n                [task]: {\n                    ...action.payload,\n                    task: task,\n                    date: date\n                }\n            }\n        }\n\n        case ADD_STATE: {\n            const { task, category, steps, dateB, } = action.payload;\n            // const task = action.payload.task\n            // const steps = action.payload.steps\n            // const dateB = action.payload.dateB\n\n            console.log(\"action.payload\", task, steps, dateB, action.payload)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        task: task,\n                        category: category,\n                        dateB: dateB,\n                        steps: steps\n                    }\n                }\n\n            }\n        }\n\n        case SHOW: {\n            const { task, show, category } = action.payload\n            console.log(\"inside SHOW category\", category)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        show: !show\n                    }\n                }\n\n\n            }\n        }\n\n        case STEP_COMPLETED: {\n            const { task, steps, category } = action.payload\n            const completed = action.newCompleted\n            const newDate = action.newDate\n            if (action.stepFinder !== null) {\n                const { step } = action.stepFinder\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n                            dateE: newDate,\n                            steps: {\n                                ...steps, [step]: { ...action.stepFinder, completedS: 1 },\n                            }\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        dateE: newDate,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n        case STEP_UNDO: {\n            const { task, steps, category } = action.payload\n            const newDate = action.newDate\n            const completed = action.newCompleted\n            console.log(\"insde reducer completed\", completed)\n            if (action.stepFinder !== null) {\n                const { step } = action.stepFinder\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n                            dateE: newDate,\n                            steps: {\n                                ...steps, [step]: { ...action.stepFinder, completedS: 0 },\n                            }\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        dateE: newDate,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n        case DELETE_TASK: {\n            const { task, category } = action.payload\n            console.log(\"inside DELETE_TASK task received\", task)\n            console.log(\"inside DELETE_TASK\", state[category])\n            const temp = state[category]\n            const newState = Object.keys(temp).reduce((object, input) => {\n                console.log(\"inside reduce\", temp[input].task)\n                if (temp[input].task !== task) {\n                    object[input] = temp[input]\n                }\n                return object\n            }, {})\n            console.log(newState)\n            return { ...state, [category]: newState }\n        }\n\n\n        default: return state\n    }\n\n}\n\n\n\nexport default reducer","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actionTypes.js",[],"/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js",["97","98","99","100"],"import { Component, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addTodo, addTodoSlave, getTask, postTaskSteps } from \"../redux/actions\"\nimport { postTask } from \"../redux/actions\";\nimport '../css/modal.css'\n\nconst CreateTask = (props) => {\n    const [task, setTask] = useState(null)\n    const [subT, setSubT] = useState(null)\n    const [subList, setSubList] = useState(\"\")\n    const [butState, setButState] = useState(false)\n    const [categoryData, setCategoryData] = useState(\"\")\n    const dispatch = useDispatch()\n    const testState = useSelector(state => state)\n    console.log(\"testState\", testState)\n    const date = new Date()\n    const taskDate = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n\n    const formCategory = (e) => {\n        console.log(\"category\", categoryData);\n        setCategoryData(e.target.value);\n    }\n    const formTask = (e) => {\n        console.log(\"target\", e.target.value)\n        setTask(e.target.value)\n        console.log(\"target\", task)\n\n    }\n\n\n    const formSubt = (e) => {\n        setSubT(e.target.value)\n        console.log(\"subT\", subT)\n    }\n\n    //Add a subTASK to subList with two conditions when it is the first subtask to be added and then where thre is not the first one\n    const addSubTask = () => {\n\n        if (subList === null) {\n            setSubList({\n                [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"if addSubTask\", subList)\n            setSubT(\"\")\n            console.log(\"ifsubt\", subT)\n\n        }\n\n        else {\n            console.log(\"else\", subT)\n            console.log(\"else addSubTask\", subList)\n            setSubList({\n                ...subList, [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"subList\", subList)\n            setSubT(\"\")\n\n        }\n\n\n\n\n    }\n\n    const dispatchAddTodo = () => {\n        // dispatch(addTodo(task, taskDate))\n        dispatch(postTask(categoryData, task, taskDate))\n        props.closeModal()\n    }\n    //Set state for task and subList to null\n    const dispatchAddTodoSlave = () => {\n        dispatch(addTodoSlave(categoryData, task, subList, taskDate))\n        dispatch(postTaskSteps(categoryData, task, taskDate, subList))\n        setTask(\"\");\n        setSubList(\"\");\n        setButState(false)\n        setCategoryData(\"\");\n        props.closeModal()\n    }\n    const butSet = () => {\n        setButState(!butState)\n\n    }\n    //When user deletes subStep perform a reducer on the sublist obj, save it on a newSublist const and set it to subList\n    const deleteSubTask = (input) => {\n        console.log(\"deleting step\", input)\n        const newSubList = Object.keys(subList).reduce((object, helper) => {\n            if (subList[helper] !== input) {\n                console.log(\"sublist\", subList[helper])\n                object[helper] = subList[helper]\n            }\n            return object\n        }, {}\n        )\n        console.log(\"newSubList\", newSubList)\n        setSubList(newSubList)\n        console.log(\"subListFromDelete\", subList)\n    }\n\n    let container = (<div className=\"box\">\n        <div className=\"close-icon\" onClick={props.closeModal}>X</div>\n        {!butState ? <>\n            <div className=\"boxTitle\">\n                <input value={task} placeholder=\"Input step Name\" onChange={(e) => formTask(e)}></input>\n                <input value={categoryData} list=\"catOptions\" placeholder=\"Input Category Name\" onChange={(e) => formCategory(e)}></input>\n\n                <datalist id=\"catOptions\" >\n                    {Object.keys(testState).map(input =>\n\n                        <option>{input}</option>\n\n                    )\n                    }\n                </datalist>\n\n            </div>\n            <div className=\"buttonBox\">\n                <button type='submit' onClick={() => dispatchAddTodo()}>Add Task</button>\n                <button type=\"submit\" onClick={() => butSet()}>CreateSubTask</button>\n            </div>\n\n        </>\n            :\n            <>\n                <div className=\"boxTitle\">\n                    <input value={task} placeholder=\"Input step Name\" onChange={(e) => formTask(e)}></input>\n                    <input value={categoryData} placeholder=\"Input Category Name\" onChange={(e) => formCategory(e)}></input>\n\n                    {subList === null ?\n                        <>\n                            {console.log(\"inside true sublist\")}\n                            <div className=\"box-Title-inside\">\n                                <input value={subT} placeholder=\"Input step Name\" onChange={(e) => formSubt(e)}></input>\n                                <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                            </div>\n\n                        </>\n                        :\n                        <>\n                            <>\n                                {Object.keys(subList).map(input => <div className=\"box-Title-inside\">\n                                    <input readOnly value={subList[input].step}></input>\n                                    <button type=\"submit\" onClick={() => deleteSubTask(subList[input])}>Delete Step</button>\n                                </div>)}\n                                <div className=\"box-Title-inside\">\n                                    <input value={subT} onChange={(e) => formSubt(e)}></input>\n                                    <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                                </div>\n                            </>\n                        </>\n                    }\n                </div>\n                <div className=\"buttonBox\">\n                    <button type='submit' onClick={() => dispatchAddTodoSlave()}>Add Task</button>\n                    <button type=\"submit\" onClick={() => butSet()}>DeleteAllSubTask</button>\n                </div>\n            </>}\n\n\n        <br></br>\n\n    </div>)\n\n    return container\n\n\n}\n\nexport default CreateTask","/Users/cait02/Desktop/Begin/React/todo-list/src/redux/actions.js",["101","102","103","104","105","106","107","108","109","110"],"import { ADD_TODO, SHOW, COMPLETED, ADD_TODO_SLAVE, STEP_COMPLETED, STEP_UNDO, POST_TASK, POST_TASK_SUCC, ADD_STATE, ADD_CATEGORY, DELETE_TASK } from \"./actionTypes\"\nimport axios from \"axios\"\nimport { useDispatch } from \"react-redux\"\n\nconst dateDrive = new Date()\n\nexport const addTodo = (content, date) => ({\n    type: ADD_TODO,\n    payload: {\n        task: content,\n        dateB: date,\n        dateE: \"1/1/1\",\n        completed: 0,\n        show: false,\n        steps: {\n        },\n\n    }\n\n})\n\nexport const postTask = (parent, content, date) => async (dispatch, getState) => {\n    const tasks = {\n        category: parent,\n        task: content,\n        dateB: date,\n        dateE: \"1/1/1\",\n        completed: 0,\n        show: false,\n        steps: {\n        },\n\n\n    }\n    console.log(\"thunk to post\", tasks)\n    await axios.post(\"http://192.168.22.27:8080/api/\", tasks)\n        .then(res => {\n            console.log(\"res\", tasks)\n            console.log(\"resdata post\", res.data)\n            dispatch(getTask())\n        })\n\n}\n\n\nexport const getStateFromApi = (input) => ({\n    type: ADD_STATE,\n    payload: input\n})\nconst createMap = (input) => (dispatch) => {\n    console.log(\"createMap\", input)\n    if (input != null) {\n        input.map(value => {\n            console.log(\"value.task\", value.task)\n            if (value.task != undefined) {\n                dispatch({ type: ADD_STATE, payload: value })\n            }\n        })\n    }\n}\nexport const getTask = () => async (dispatch, getState) => {\n    console.log(\"insideapi getTASK\")\n    await axios.get(\"http://192.168.22.27:8080/api/\")\n        .then(res => {\n            dispatch(createMap(res.data))\n\n        })\n}\n\nexport const updateShowAPI = (input) => (dispatch, getState) => {\n    console.log(\"updateshow API\", getState)\n}\n\nexport const postTaskSteps = (parent, content, date, contentSteps) => async (dispatch, getState) => {\n    const tasks = {\n        task: content,\n        category: parent,\n        dateB: date,\n        dateE: \"TBA\",\n        completed: 0,\n        show: false,\n        steps: contentSteps\n\n\n    }\n    console.log(\"thunk to post\", tasks)\n    await axios.post(\"http://192.168.22.27:8080/api/\", tasks)\n        .then(res => {\n            console.log(\"res\", res)\n            console.log(\"resdata\", res.data)\n            dispatch(getTask())\n        })\n\n}\n//addTodo slave to create steps from addTodo\nexport const addTodoSlave = (content, contentSteps, date) => ({\n    type: ADD_TODO_SLAVE,\n    payload: {\n        task: content,\n        dateB: date,\n        dateE: \"TBA\",\n        completed: 0,\n        show: false,\n        steps: contentSteps\n    }\n})\n\nexport const toogleShow = item => ({\n    type: SHOW,\n    payload: item\n})\n\nexport const toogleShowAPI = (item) => (dispatch, getState) => {\n    const state = getState()\n    const id = item.id\n    console.log(\"toogleShowAPI\", state)\n    console.log(\"toogleShowAPI\", id)\n    const task = Object.keys(state).reduce((object, helper) => {\n        if (state[helper].task === item.task) {\n            object[helper] = state[helper]\n            console.log(\"inside reducer\", object[helper])\n        }\n        return object\n    }, {})\n    console.log(\"task to PUT\", task)\n    axios.put(\"http://192.168.22.27:8080/api/\" + id, task)\n        .then(res => console.log(\"res from PUT\", res))\n}\n\n\n\nexport const stepCompleted = (item, itemStep, itemCompleted) => (dispatch, getState) => {\n    if (itemStep !== null) {\n        let state = itemStep.step;\n        state = state.replace(/\\s/g, \"_\")\n        console.log(\"STEP Completed\", itemStep)\n        if (itemCompleted == 1) {\n            const taskDate = (dateDrive.getMonth() + 1) + \"/\" + dateDrive.getDate() + \"/\" + dateDrive.getFullYear()\n            console.log(\"taskDate\", taskDate)\n            axios.put(\"http://192.168.22.27:8080/api/\" + item.id + \"/\" + state, item)\n                .then(res => {\n                    console.log(\"response for step complete\", res.status)\n                    dispatch({\n                        type: STEP_COMPLETED,\n                        payload: item,\n                        stepFinder: itemStep,\n                        newCompleted: itemCompleted,\n                        newDate: taskDate\n                    })\n                })\n        }\n\n        else {\n            console.log(\"STEP Completed\", itemCompleted)\n            axios.put(\"http://192.168.22.27:8080/api/\" + item.id + \"/\" + state, item)\n                .then(res => {\n                    console.log(\"response for step complete\", res.status)\n                    dispatch({\n                        type: STEP_COMPLETED,\n                        payload: item,\n                        stepFinder: itemStep,\n                        newCompleted: itemCompleted,\n                        newDate: \"TBA\"\n                    })\n                })\n        }\n\n    }\n    else {\n        console.log(\"STEP Completed\", itemCompleted)\n        const taskDate = (dateDrive.getMonth() + 1) + \"/\" + dateDrive.getDate() + \"/\" + dateDrive.getFullYear()\n        axios.put(\"http://192.168.22.27:8080/api/\" + item.id + \"/\" + \"null\", item)\n            .then(res => {\n                console.log(\"response for step complete\", res.status)\n                dispatch({\n                    type: STEP_COMPLETED,\n                    payload: item,\n                    stepFinder: itemStep,\n                    newCompleted: itemCompleted,\n                    newDate: taskDate\n                })\n            })\n\n\n    }\n\n}\n\nexport const stepUndo = (item, itemStep, itemCompleted) => (dispatch, getState) => {\n    if (itemStep !== null) {\n        let state = itemStep.step;\n        state = state.replace(/\\s/g, \"_\")\n        console.log(\"STEP UNDO\", itemStep.step)\n\n        axios.put(\"http://192.168.22.27:8080/api/\" + item.id + \"/\" + state, item)\n            .then(res => {\n                console.log(\"response for step undo\", res.status)\n                dispatch({\n                    type: STEP_UNDO,\n                    payload: item,\n                    stepFinder: itemStep,\n                    newCompleted: itemCompleted,\n                    newDate: \"TBA\"\n                })\n            })\n    }\n    else {\n        axios.put(\"http://192.168.22.27:8080/api/\" + item.id + \"/\" + \"null\", item)\n            .then(res => {\n                console.log(\"response for step undo\", res.status)\n                dispatch({\n                    type: STEP_UNDO,\n                    payload: item,\n                    stepFinder: itemStep,\n                    newCompleted: itemCompleted,\n                    newDate: \"TBA\"\n                })\n            })\n    }\n\n\n}\n\nexport const addCategory = (item) => ({\n    type: ADD_CATEGORY,\n    payload: item\n})\n\nexport const deleteTask = (item) => (dispatch, getState) => {\n\n    axios.delete(\"http://192.168.22.27:8080/api/\" + item.id, item).\n        then(res => {\n            console.log(\"delete status\", res.status)\n            dispatch({ type: DELETE_TASK, payload: item })\n        })\n}\n\nexport const deleteTaskNOAPI = (item) => (dispatch, getState) => {\n\n\n    dispatch({ type: DELETE_TASK, payload: item })\n\n}","/Users/cait02/Desktop/Begin/React/todo-list/src/components/showListItems.js",["111","112","113","114","115","116","117"],"import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { deleteTask, deleteTaskNOAPI, getStateFromApi, getTask, stepCompleted, stepUndo, toogleShow, toogleShowAPI, updateShowAPI } from \"../redux/actions\"\nimport TodoSubList from './todosublist'\nimport \"../css/progress.css\"\n\n\n\nconst ShowListItem = (props) => {\n    const dispatch = useDispatch()\n    const tempState = useSelector(state => state)\n    const selector = tempState[props.category]\n    console.log(\"props category\", props.category)\n    console.log(\"selector state\", selector)\n    console.log(\"props category array\", selector[props.category])\n    //update state show on database\n    const toogleUpdate = (input) => {\n        dispatch(toogleShow(input))\n        dispatch(toogleShowAPI(input))\n        console.log(\"input show\", input)\n    }\n    if (Object.keys(selector).length >= 1) {\n        console.log(\"inside showItem\", selector)\n        console.log(\"using selector len\", Object.keys(selector))\n\n        let mapper =\n            Object.keys(selector).map(input =>\n\n                <div className=\"holder\">\n                    {console.log(\"input\", selector[input])}\n\n                    {(Object.keys(selector[input].steps).length == 0) ?\n\n                        <>\n                            <div className=\"container\">\n\n                                <div className=\"item2\">{selector[input].task}\n                                    <div className=\"button-class\">\n                                        {selector[input].completed === 1 ?\n                                            <>\n                                                <button type='submit' onClick={() => (dispatch(stepUndo(selector[input], null, 0)))}  >Undo</button>\n                                                <button type='submit' onClick={() => dispatch(deleteTask(selector[input]))}>Remove</button>\n                                            </>\n                                            :\n                                            <button type='submit' onClick={() => (dispatch(stepCompleted(selector[input], null, 1)))}  >Completed</button>\n                                        }\n\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateB}</div>\n                                <div className=\"item2\">\n                                    <div className=\"filler\" style={{ width: `${selector[input].completed * 100}%` }}>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateE}</div>\n                            </div>\n                        </>\n\n                        :\n                        <>\n                            <div className=\"container\">\n\n                                <div className=\"item2\">{selector[input].task}\n                                    <div className=\"button-class\">\n                                        <>\n                                            <button type='submit' onClick={() => (toogleUpdate(selector[input]))}  >ShowSteps</button>\n                                            {selector[input].completed === 1 &&\n                                                <button type='submit' onClick={() => dispatch(deleteTask(selector[input]))}>Remove</button>\n                                            }\n                                        </>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateB}</div>\n                                <div className=\"item2\">\n                                    <div className=\"filler\" style={{ width: `${selector[input].completed * 100}%` }}>\n                                    </div>\n                                </div>\n                                <div className=\"item2\">{selector[input].dateE}</div>\n                            </div>\n                            {console.log(\"input.date\", selector[input].dateB)}\n                            {console.log(\"input.steps\", selector[input].steps)}\n\n                            <div>{(Object.keys(selector[input].steps).length >= 1 && selector[input].show === true) && <TodoSubList propsParent={selector[input]} props={selector[input].steps} />}\n                            </div>\n\n\n                        </>\n                    }\n\n                </div>\n            )\n        return mapper\n    }\n    return null\n}\n\nexport default ShowListItem","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskCompletion.js",["118","119","120","121","122","123"],"import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { toogleShow } from \"../redux/actions\"\n\nconst taskCompletion = (parent, child) => {\n    let index = 0, counter = 1, result = 0\n    Object.keys(child).map(input => {\n        //index counts the number of steps, while counter the number of completed steps\n        index = index + 1\n        /** We know that every time we dispatch we have completed a step therfore we need to\n         * take in account that our counter(steps completed) should start in 1 however it\n         * cannot exceeed the length of the number steps therefore we set the counter to be \n         * less than the number of steps if not on the last render it will make the widht >100%\n         */\n        if (child[input].completedS > 0 && counter < Object.keys(child).length) {\n            counter = (counter + 1)\n            console.log(\"result for counter\", counter)\n\n        }\n    })\n    if (counter > 0) {\n        result = (counter / index)\n        console.log(\"result for new state\", result)\n        return result\n    }\n    console.log(\"result for index\", index)\n\n    console.log(\"result for new state\", result)\n    //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n    //we need to account for it by doing 1(completedtask)/index(number of steps)\n}\n\nexport default taskCompletion","/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskUndo.js",["124"],"const taskUndo = (parent, child) => {\n    let index = 0, counter = Object.keys(child).length - 1, result = 0\n    Object.keys(child).map(input => {\n        index++\n        if (child[input].completedS === 0 && counter > -1) {\n            counter -= 1\n        }\n    })\n    result = counter / index\n    console.log(\"new result \", result)\n    return result\n}\n\nexport default taskUndo","/Users/cait02/Desktop/Begin/React/todo-list/src/components/getDataAPI.js",["125"],"import { useDispatch, useSelector } from 'react-redux'\nimport { getTask } from '../redux/actions'\n\nconst GetDataFromAPI = () => {\n    const dispatch = useDispatch()\n    // const selector = useSelector(state => state)\n    //create redux state if there is data on the dB\n    dispatch(getTask())\n    //console.log(\"getDataAPI.js Data\", data)\n    // data.map(input => console.log(\"data input map\", input))\n    //console.log(\"getDataAPI.js\", selector)\n    return null\n}\n\nexport default GetDataFromAPI","/Users/cait02/Desktop/Begin/React/todo-list/src/components/createCollection.js",["126","127"],"import React, { Component, useState } from \"react\"\nimport '../css/modal.css'\n\nconst CreateCollection = (props) => {\n    return (\n        <div className=\"popUp\">\n            <div className=\"box\">\n                <div className=\"close-icon\" onClick={props.closeModal}>x</div>\n                <div className=\"boxTitle\">Type Name of New Table\n                </div>\n                <div className=\"boxTitle\">\n                    {props.content}\n                </div>\n\n            </div>\n        </div>\n    )\n}\nexport default CreateCollection",["128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":17,"nodeType":"136","messageId":"137","endLine":2,"endColumn":26},{"ruleId":"134","severity":1,"message":"138","line":9,"column":9,"nodeType":"136","messageId":"137","endLine":9,"endColumn":13},{"ruleId":"134","severity":1,"message":"139","line":49,"column":9,"nodeType":"136","messageId":"137","endLine":49,"endColumn":14},{"ruleId":"134","severity":1,"message":"140","line":53,"column":9,"nodeType":"136","messageId":"137","endLine":53,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":57,"column":61,"nodeType":"143","messageId":"144","endLine":57,"endColumn":62,"fix":"145"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"146","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":37},{"ruleId":"134","severity":1,"message":"147","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":19},{"ruleId":"134","severity":1,"message":"148","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":21},{"ruleId":"134","severity":1,"message":"149","line":12,"column":18,"nodeType":"136","messageId":"137","endLine":12,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"150","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":12},{"ruleId":"134","severity":1,"message":"151","line":3,"column":25,"nodeType":"136","messageId":"137","endLine":3,"endColumn":38},{"ruleId":"134","severity":1,"message":"152","line":3,"column":50,"nodeType":"136","messageId":"137","endLine":3,"endColumn":60},{"ruleId":"134","severity":1,"message":"153","line":4,"column":23,"nodeType":"136","messageId":"137","endLine":4,"endColumn":34},{"ruleId":"134","severity":1,"message":"154","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":13},{"ruleId":"134","severity":1,"message":"155","line":2,"column":26,"nodeType":"136","messageId":"137","endLine":2,"endColumn":40},{"ruleId":"134","severity":1,"message":"156","line":2,"column":58,"nodeType":"136","messageId":"137","endLine":2,"endColumn":67},{"ruleId":"134","severity":1,"message":"157","line":2,"column":80,"nodeType":"136","messageId":"137","endLine":2,"endColumn":89},{"ruleId":"134","severity":1,"message":"135","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":19},{"ruleId":"134","severity":1,"message":"146","line":1,"column":31,"nodeType":"136","messageId":"137","endLine":1,"endColumn":40},{"ruleId":"134","severity":1,"message":"158","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":17},{"ruleId":"134","severity":1,"message":"159","line":3,"column":33,"nodeType":"136","messageId":"137","endLine":3,"endColumn":40},{"ruleId":"134","severity":1,"message":"156","line":1,"column":26,"nodeType":"136","messageId":"137","endLine":1,"endColumn":35},{"ruleId":"134","severity":1,"message":"157","line":1,"column":80,"nodeType":"136","messageId":"137","endLine":1,"endColumn":89},{"ruleId":"134","severity":1,"message":"160","line":1,"column":91,"nodeType":"136","messageId":"137","endLine":1,"endColumn":105},{"ruleId":"134","severity":1,"message":"148","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":21},{"ruleId":"161","severity":1,"message":"162","line":53,"column":25,"nodeType":"163","messageId":"164","endLine":53,"endColumn":27},{"ruleId":"165","severity":1,"message":"166","line":55,"column":28,"nodeType":"167","messageId":"168","endLine":55,"endColumn":30},{"ruleId":"165","severity":1,"message":"169","line":137,"column":27,"nodeType":"167","messageId":"168","endLine":137,"endColumn":29},{"ruleId":"170","severity":1,"message":"171","line":172,"column":68,"nodeType":"167","messageId":"172","endLine":172,"endColumn":69},{"ruleId":"170","severity":1,"message":"171","line":208,"column":68,"nodeType":"167","messageId":"172","endLine":208,"endColumn":69},{"ruleId":"141","severity":1,"message":"142","line":231,"column":67,"nodeType":"143","messageId":"144","endLine":231,"endColumn":68,"fix":"173"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":19},{"ruleId":"134","severity":1,"message":"174","line":1,"column":21,"nodeType":"136","messageId":"137","endLine":1,"endColumn":29},{"ruleId":"134","severity":1,"message":"175","line":3,"column":22,"nodeType":"136","messageId":"137","endLine":3,"endColumn":37},{"ruleId":"134","severity":1,"message":"176","line":3,"column":39,"nodeType":"136","messageId":"137","endLine":3,"endColumn":54},{"ruleId":"134","severity":1,"message":"159","line":3,"column":56,"nodeType":"136","messageId":"137","endLine":3,"endColumn":63},{"ruleId":"134","severity":1,"message":"177","line":3,"column":117,"nodeType":"136","messageId":"137","endLine":3,"endColumn":130},{"ruleId":"165","severity":1,"message":"169","line":32,"column":65,"nodeType":"167","messageId":"168","endLine":32,"endColumn":67},{"ruleId":"134","severity":1,"message":"135","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":19},{"ruleId":"134","severity":1,"message":"174","line":1,"column":21,"nodeType":"136","messageId":"137","endLine":1,"endColumn":29},{"ruleId":"134","severity":1,"message":"148","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":21},{"ruleId":"134","severity":1,"message":"153","line":2,"column":23,"nodeType":"136","messageId":"137","endLine":2,"endColumn":34},{"ruleId":"134","severity":1,"message":"178","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":20},{"ruleId":"161","severity":1,"message":"162","line":7,"column":34,"nodeType":"163","messageId":"164","endLine":7,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":3,"column":34,"nodeType":"163","messageId":"164","endLine":3,"endColumn":36},{"ruleId":"134","severity":1,"message":"153","line":1,"column":23,"nodeType":"136","messageId":"137","endLine":1,"endColumn":34},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"174","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"130","replacedBy":"179"},{"ruleId":"132","replacedBy":"180"},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'todo' is assigned a value but never used.","'fetch' is assigned a value but never used.","'updater' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"183","text":"184"},"'useEffect' is defined but never used.","'TodoSubList' is defined but never used.","'useDispatch' is defined but never used.","'setData' is assigned a value but never used.","'Grid' is defined but never used.","'taskCompleted' is defined but never used.","'deleteTask' is defined but never used.","'useSelector' is defined but never used.","'axios' is defined but never used.","'ADD_TODO_SLAVE' is defined but never used.","'COMPLETED' is defined but never used.","'POST_TASK' is defined but never used.","'addTodo' is defined but never used.","'getTask' is defined but never used.","'POST_TASK_SUCC' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"range":"185","text":"186"},"'useState' is defined but never used.","'deleteTaskNOAPI' is defined but never used.","'getStateFromApi' is defined but never used.","'updateShowAPI' is defined but never used.","'toogleShow' is defined but never used.",["181"],["182"],"no-global-assign","no-unsafe-negation",[1456,1464],"\n      .",[6817,6827],"\n        ."]