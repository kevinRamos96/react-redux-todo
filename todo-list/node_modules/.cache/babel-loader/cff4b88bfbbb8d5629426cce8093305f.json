{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/cait02/Desktop/Begin/React/todo-list/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { Component, useEffect, useState } from \"react\";\nimport TodoList from './components/todolist';\nimport GetDataFromAPI from './components/getDataAPI';\nimport axios from 'axios';\n\nconst App = () => {\n  _s();\n\n  const todo = [{\n    task: \"firts\",\n    dateB: \"1/1/1\",\n    dateE: \"1/1/1\",\n    completed: false,\n    show: false,\n    steps: [{\n      miniT: \"test\",\n      completed: true\n    }, {\n      miniT: 'test2'\n    }]\n  }, {\n    task: \"second\",\n    dateB: \"1/1/1\",\n    dateE: \"1/1/1\",\n    completed: false,\n    show: false,\n    steps: [{\n      miniT: \"test\",\n      completed: true\n    }, {\n      miniT: 'test2'\n    }]\n  }, {\n    task: \"third\",\n    dateB: \"1/1/1\",\n    dateE: \"1/1/1\",\n    completed: false,\n    show: false,\n    steps: []\n  }]; //Initiate redux state if there is data saved omn DB with GETDataFromAPI() needs to only be run once at the beginning\n  //of the application if it is run other than at the beginning it casuse the app to create an infinite loop of API calls\n  //due to constantly re rendering\n  //const data = GetDataFromAPI() //initiate redux state\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(\"\");\n\n  const result = async () => {\n    await axios.get(\"http://192.168.22.27:8080/api/getCategories\").then(res => {\n      console.log(\"res.status\", res.status);\n      console.log(res.data);\n      setData(res.data);\n      setIsLoading(false);\n    });\n  };\n\n  const da = result();\n  const [state, setState] = useState(todo);\n  console.log(\"state\", state);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"LOADING\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TodoList, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 11\n  }, this);\n};\n\n_s(App, \"jhBfnVXgzzzCH8tBaiBQhbMwS7M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cait02/Desktop/Begin/React/todo-list/src/App.js"],"names":["React","Component","useEffect","useState","TodoList","GetDataFromAPI","axios","App","todo","task","dateB","dateE","completed","show","steps","miniT","isLoading","setIsLoading","data","setData","result","get","then","res","console","log","status","da","state","setState"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAMC,IAAI,GACR,CAAC;AACCC,IAAAA,IAAI,EAAE,OADP;AAECC,IAAAA,KAAK,EAAE,OAFR;AAGCC,IAAAA,KAAK,EAAE,OAHR;AAICC,IAAAA,SAAS,EAAE,KAJZ;AAKCC,IAAAA,IAAI,EAAE,KALP;AAMCC,IAAAA,KAAK,EAAE,CAAC;AACNC,MAAAA,KAAK,EAAE,MADD;AAENH,MAAAA,SAAS,EAAE;AAFL,KAAD,EAIP;AACEG,MAAAA,KAAK,EAAE;AADT,KAJO;AANR,GAAD,EAcA;AACEN,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,KAAK,EAAE,OAFT;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,SAAS,EAAE,KAJb;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEC,IAAAA,KAAK,EAAE,CAAC;AACNC,MAAAA,KAAK,EAAE,MADD;AAENH,MAAAA,SAAS,EAAE;AAFL,KAAD,EAIP;AACEG,MAAAA,KAAK,EAAE;AADT,KAJO;AANT,GAdA,EA4BA;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,KAAK,EAAE,OAFT;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,SAAS,EAAE,KAJb;AAKEC,IAAAA,IAAI,EAAE,KALR;AAMEC,IAAAA,KAAK,EAAE;AANT,GA5BA,CADF,CAFgB,CAuChB;AACA;AACA;AACA;;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;;AACA,QAAMiB,MAAM,GAAG,YAAY;AACzB,UAAMd,KAAK,CAACe,GAAN,CAAU,6CAAV,EACJC,IADI,CACCC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,GAAG,CAACG,MAA9B;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,IAAhB;AACAC,MAAAA,OAAO,CAACI,GAAG,CAACL,IAAL,CAAP;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KANG,CAAN;AAOD,GARD;;AASA,QAAMU,EAAE,GAAGP,MAAM,EAAjB;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAACK,IAAD,CAAlC;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;;AAEA,MAAIZ,SAAJ,EAAe;AACb,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACD;;AAED,sBAAQ,QAAC,QAAD;AACN,IAAA,IAAI,EAAEE;AADA;AAAA;AAAA;AAAA;AAAA,UAAR;AAID,CAlED;;GAAMX,G;;KAAAA,G;AAqEN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { Component, useEffect, useState } from \"react\"\nimport TodoList from './components/todolist'\nimport GetDataFromAPI from './components/getDataAPI'\nimport axios from 'axios'\nconst App = () => {\n\n  const todo =\n    [{\n      task: \"firts\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: [{\n        miniT: \"test\",\n        completed: true\n      },\n      {\n        miniT: 'test2'\n      }]\n    },\n    {\n      task: \"second\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: [{\n        miniT: \"test\",\n        completed: true\n      },\n      {\n        miniT: 'test2'\n      }]\n    },\n    {\n      task: \"third\",\n      dateB: \"1/1/1\",\n      dateE: \"1/1/1\",\n      completed: false,\n      show: false,\n      steps: []\n    }]\n  //Initiate redux state if there is data saved omn DB with GETDataFromAPI() needs to only be run once at the beginning\n  //of the application if it is run other than at the beginning it casuse the app to create an infinite loop of API calls\n  //due to constantly re rendering\n  //const data = GetDataFromAPI() //initiate redux state\n  const [isLoading, setIsLoading] = useState(true)\n  const [data, setData] = useState(\"\")\n  const result = async () => {\n    await axios.get(\"http://192.168.22.27:8080/api/getCategories\").\n      then(res => {\n        console.log(\"res.status\", res.status)\n        console.log(res.data);\n        setData(res.data)\n        setIsLoading(false)\n      })\n  }\n  const da = result()\n  const [state, setState] = useState(todo)\n  console.log(\"state\", state)\n\n  if (isLoading) {\n    return (<div>LOADING</div>)\n  }\n\n  return (<TodoList\n    data={data}\n  ></TodoList>)\n\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}