{"ast":null,"code":"import axios from \"axios\";\nimport { ADD_TODO, SHOW, ADD_TODO_SLAVE, STEP_COMPLETED, COMPLETED, STEP_UNDO, POST_TASK, ADD_STATE } from \"../actionTypes\";\nconst initialState = {};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      {\n        const {\n          task,\n          date\n        } = action.payload;\n        return { ...state,\n          [task]: { ...action.payload,\n            task: task,\n            date: date\n          }\n        };\n      }\n\n    case ADD_STATE:\n      {\n        const {\n          task,\n          category,\n          steps,\n          dateB\n        } = action.payload; // const task = action.payload.task\n        // const steps = action.payload.steps\n        // const dateB = action.payload.dateB\n\n        console.log(\"action.payload\", task, steps, dateB, action.payload);\n        return { ...state,\n          [category]: { ...state[category],\n            [task]: { ...action.payload,\n              task: task,\n              category: category,\n              dateB: dateB,\n              steps: steps\n            }\n          }\n        };\n      }\n\n    case SHOW:\n      {\n        const {\n          task,\n          show,\n          category\n        } = action.payload;\n        console.log(\"inside SHOW category\", category);\n        return { ...state,\n          [category]: { ...state[category],\n            [task]: { ...action.payload,\n              show: !show\n            }\n          }\n        };\n      }\n\n    case STEP_COMPLETED:\n      {\n        const {\n          task,\n          category\n        } = action.payload;\n        const completed = action.newCompleted;\n        const {\n          step\n        } = action.stepFinder;\n\n        if (step !== null) {\n          return { ...state,\n            [category]: { ...state[category],\n              [task]: { ...action.payload,\n                completed: completed\n              }\n            }\n          };\n        }\n\n        return { ...state,\n          [category]: { ...state[category],\n            [task]: { ...action.payload,\n              completed: completed\n            }\n          }\n        };\n      }\n\n    case STEP_UNDO:\n      {\n        const {\n          task,\n          category\n        } = action.payload;\n        const completed = action.newCompleted;\n        const {\n          step\n        } = action.stepFinder;\n        console.log(\"insde reducer completed\", completed);\n\n        if (step !== null) {\n          return { ...state,\n            [category]: { ...state[category],\n              [task]: { ...action.payload,\n                completed: completed\n              }\n            }\n          };\n        }\n\n        return { ...state,\n          [category]: { ...state[category],\n            [task]: { ...action.payload,\n              completed: completed\n            }\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/cait02/Desktop/Begin/React/todo-list/src/redux/reducers/todoReducer.js"],"names":["axios","ADD_TODO","SHOW","ADD_TODO_SLAVE","STEP_COMPLETED","COMPLETED","STEP_UNDO","POST_TASK","ADD_STATE","initialState","reducer","state","action","type","task","date","payload","category","steps","dateB","console","log","show","completed","newCompleted","step","stepFinder"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { ADD_TODO, SHOW, ADD_TODO_SLAVE, STEP_COMPLETED, COMPLETED, STEP_UNDO, POST_TASK, ADD_STATE } from \"../actionTypes\"\n\nconst initialState = {\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO: {\n            const { task, date } = action.payload;\n            return {\n\n                ...state,\n                [task]: {\n                    ...action.payload,\n                    task: task,\n                    date: date\n                }\n            }\n        }\n\n        case ADD_STATE: {\n            const { task, category, steps, dateB, } = action.payload;\n            // const task = action.payload.task\n            // const steps = action.payload.steps\n            // const dateB = action.payload.dateB\n\n            console.log(\"action.payload\", task, steps, dateB, action.payload)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        task: task,\n                        category: category,\n                        dateB: dateB,\n                        steps: steps\n                    }\n                }\n\n            }\n        }\n\n        case SHOW: {\n            const { task, show, category } = action.payload\n            console.log(\"inside SHOW category\", category)\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        show: !show\n                    }\n                }\n\n\n            }\n        }\n\n        case STEP_COMPLETED: {\n            const { task, category } = action.payload\n            const completed = action.newCompleted\n            const { step } = action.stepFinder\n            if (step !== null) {\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n        case STEP_UNDO: {\n            const { task, category } = action.payload\n            const completed = action.newCompleted\n            const { step } = action.stepFinder\n            console.log(\"insde reducer completed\", completed)\n            if (step !== null) {\n                return {\n                    ...state,\n                    [category]: {\n                        ...state[category],\n                        [task]: {\n                            ...action.payload,\n                            completed: completed,\n\n                        }\n                    }\n\n                }\n            }\n            return {\n                ...state,\n                [category]: {\n                    ...state[category],\n                    [task]: {\n                        ...action.payload,\n                        completed: completed,\n\n                    }\n                }\n\n            }\n        }\n\n\n        default: return state\n    }\n\n}\n\n\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}