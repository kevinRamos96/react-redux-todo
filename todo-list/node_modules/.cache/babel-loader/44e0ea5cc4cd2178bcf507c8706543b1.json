{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { stepCompleted, taskCompleted } from \"../redux/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../App.css\";\n\nconst TodoSubList = ({\n  propsParent,\n  props\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  console.log(\"props\", props);\n\n  const taskCompletion = (parent, child) => {\n    let index = 0,\n        counter = 1,\n        result = 0;\n    Object.keys(child).map(input => {\n      //index counts the number of steps, while counter the number of completed steps\n      index = index + 1;\n      /** We know that every time we dispatch we have completed a step therfore we need to\n       * take in account that our counter(steps completed) should start in 1 however it\n       * cannot exceeed the length of the number steps therefore we set the counter to be \n       * less than the number of steps if not on the last render it will make the widht >100%\n       */\n\n      if (child[input].completed > 0 && counter < Object.keys(child).length) {\n        counter = counter + 1;\n        console.log(\"result for counter\", counter);\n      }\n    });\n\n    if (counter > 0) {\n      result = counter / index;\n      console.log(\"result for new state\", result);\n      return result;\n    }\n\n    console.log(\"result for index\", index);\n    console.log(\"result for new state\", result); //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n    //we need to account for it by doing 1(completedtask)/index(number of steps)\n  };\n\n  if (Object.keys(props).length >= 1) {\n    let container = Object.keys(props).map(input => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [console.log(\"propsStep\", props[input].step), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subitem1-container \",\n        children: props[input].step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subitem1-container \",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subitem1-container \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filler\",\n          style: {\n            width: `${props[input].completed * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subitem1-container \",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => dispatch(stepCompleted(propsParent, props[input], taskCompletion(propsParent, props))),\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this));\n    console.log(\"returning\");\n    return container;\n  }\n\n  return null;\n};\n\n_s(TodoSubList, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodoSubList;\nexport default TodoSubList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoSubList\");","map":{"version":3,"sources":["/Users/cait02/Desktop/Begin/React/todo-list/src/components/todosublist.js"],"names":["React","Component","Grid","stepCompleted","taskCompleted","useDispatch","useSelector","TodoSubList","propsParent","props","dispatch","console","log","taskCompletion","parent","child","index","counter","result","Object","keys","map","input","completed","length","container","step","width"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,YAAP;;AAIA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA4B;AAAA;;AAC5C,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;;AAGA,QAAMI,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtC,QAAIC,KAAK,GAAG,CAAZ;AAAA,QAAeC,OAAO,GAAG,CAAzB;AAAA,QAA4BC,MAAM,GAAG,CAArC;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,GAAnB,CAAuBC,KAAK,IAAI;AAC5B;AACAN,MAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA;AACZ;AACA;AACA;AACA;;AACY,UAAID,KAAK,CAACO,KAAD,CAAL,CAAaC,SAAb,GAAyB,CAAzB,IAA8BN,OAAO,GAAGE,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBS,MAA/D,EAAuE;AACnEP,QAAAA,OAAO,GAAIA,OAAO,GAAG,CAArB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCK,OAAlC;AAEH;AACJ,KAbD;;AAcA,QAAIA,OAAO,GAAG,CAAd,EAAiB;AACbC,MAAAA,MAAM,GAAID,OAAO,GAAGD,KAApB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCM,MAApC;AACA,aAAOA,MAAP;AACH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAhC;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCM,MAApC,EAvBsC,CAwBtC;AACA;AACH,GA1BD;;AA8BA,MAAIC,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmBe,MAAnB,IAA6B,CAAjC,EAAoC;AAChC,QAAIC,SAAS,GACTN,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmBY,GAAnB,CAAuBC,KAAK,iBAExB;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACKX,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,KAAK,CAACa,KAAD,CAAL,CAAaI,IAAtC,CADL,eAGI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,kBACKjB,KAAK,CAACa,KAAD,CAAL,CAAaI;AADlB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAMI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eASI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAwB,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAG,GAAElB,KAAK,CAACa,KAAD,CAAL,CAAaC,SAAb,GAAyB,GAAI;AAAzC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAcI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,MAAMb,QAAQ,CAACP,aAAa,CAACK,WAAD,EAAcC,KAAK,CAACa,KAAD,CAAnB,EAA4BT,cAAc,CAACL,WAAD,EAAcC,KAAd,CAA1C,CAAd,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CADJ;AAuBAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAOa,SAAP;AACH;;AACD,SAAO,IAAP;AACH,CA/DD;;GAAMlB,W;UACeF,W;;;KADfE,W;AAmEN,eAAeA,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport { stepCompleted, taskCompleted } from \"../redux/actions\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nimport \"../App.css\"\n\n\n\nconst TodoSubList = ({ propsParent, props }) => {\n    const dispatch = useDispatch()\n    console.log(\"props\", props)\n\n\n    const taskCompletion = (parent, child) => {\n        let index = 0, counter = 1, result = 0\n        Object.keys(child).map(input => {\n            //index counts the number of steps, while counter the number of completed steps\n            index = index + 1\n            /** We know that every time we dispatch we have completed a step therfore we need to\n             * take in account that our counter(steps completed) should start in 1 however it\n             * cannot exceeed the length of the number steps therefore we set the counter to be \n             * less than the number of steps if not on the last render it will make the widht >100%\n             */\n            if (child[input].completed > 0 && counter < Object.keys(child).length) {\n                counter = (counter + 1)\n                console.log(\"result for counter\", counter)\n\n            }\n        })\n        if (counter > 0) {\n            result = (counter / index)\n            console.log(\"result for new state\", result)\n            return result\n        }\n        console.log(\"result for index\", index)\n\n        console.log(\"result for new state\", result)\n        //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n        //we need to account for it by doing 1(completedtask)/index(number of steps)\n    }\n\n\n\n    if (Object.keys(props).length >= 1) {\n        let container =\n            Object.keys(props).map(input =>\n\n                <div className='container'>\n                    {console.log(\"propsStep\", props[input].step)}\n\n                    <div className=\"subitem1-container \">\n                        {props[input].step}\n                    </div>\n                    <div className=\"subitem1-container \">\n                        Date\n                </div>\n                    <div className=\"subitem1-container \">\n                        <div className=\"filler\" style={{ width: `${props[input].completed * 100}%` }}>\n                        </div>\n                    </div>\n\n                    <div className=\"subitem1-container \">\n                        <button type=\"submit\" onClick={() => dispatch(stepCompleted(propsParent, props[input], taskCompletion(propsParent, props)))}>Completed</button>\n                    </div>\n\n                </div>\n            )\n        console.log(\"returning\")\n        return container\n    }\n    return null\n}\n\n\n\nexport default TodoSubList;"]},"metadata":{},"sourceType":"module"}