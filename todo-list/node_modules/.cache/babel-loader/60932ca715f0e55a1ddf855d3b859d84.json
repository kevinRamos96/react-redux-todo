{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js\",\n    _s = $RefreshSig$();\n\nimport { Component, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTodo, addTodoSlave, getTask, postTaskSteps } from \"../redux/actions\";\nimport { postTask } from \"../redux/actions\";\nimport '../css/modal.css';\n\nconst CreateTask = props => {\n  _s();\n\n  const [task, setTask] = useState(null);\n  const [subT, setSubT] = useState(null);\n  const [subList, setSubList] = useState(\"\");\n  const [butState, setButState] = useState(false);\n  const dispatch = useDispatch();\n  const testState = useSelector(state => state);\n  console.log(\"testState\", testState);\n  const date = new Date();\n  const taskDate = date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n\n  const formTask = e => {\n    console.log(\"target\", e.target.value);\n    setTask(e.target.value);\n    console.log(\"target\", task);\n  };\n\n  const formSubt = e => {\n    setSubT(e.target.value);\n    console.log(\"subT\", subT);\n  }; //Add a subTASK to subList with two conditions when it is the first subtask to be added and then where thre is not the first one\n\n\n  const addSubTask = () => {\n    if (subList === null) {\n      setSubList({\n        [subT]: {\n          step: subT,\n          dateBS: taskDate,\n          completedS: 0\n        }\n      });\n      console.log(\"if addSubTask\", subList);\n      setSubT(\"\");\n      console.log(\"ifsubt\", subT);\n    } else {\n      console.log(\"else\", subT);\n      console.log(\"else addSubTask\", subList);\n      setSubList({ ...subList,\n        [subT]: {\n          step: subT,\n          dateBS: taskDate,\n          completedS: 0\n        }\n      });\n      console.log(\"subList\", subList);\n      setSubT(\"\");\n    }\n  };\n\n  const dispatchAddTodo = () => {\n    dispatch(addTodo(task, taskDate));\n    dispatch(postTask(task, taskDate));\n    dispatch(getTask());\n  }; //Set state for task and subList to null\n\n\n  const dispatchAddTodoSlave = () => {\n    dispatch(addTodoSlave(props.category, task, subList, taskDate));\n    dispatch(postTaskSteps(props.category, task, taskDate, subList));\n    setTask(\"\");\n    setSubList(\"\");\n    setButState(false);\n  };\n\n  const butSet = () => {\n    setButState(!butState);\n  }; //When user deletes subStep perform a reducer on the sublist obj, save it on a newSublist const and set it to subList\n\n\n  const deleteSubTask = input => {\n    console.log(\"deleting step\", input);\n    const newSubList = Object.keys(subList).reduce((object, helper) => {\n      if (subList[helper] !== input) {\n        console.log(\"sublist\", subList[helper]);\n        object[helper] = subList[helper];\n      }\n\n      return object;\n    }, {});\n    console.log(\"newSubList\", newSubList);\n    setSubList(newSubList);\n    console.log(\"subListFromDelete\", subList);\n  };\n\n  let container = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"close-icon\",\n      onClick: props.closeModal,\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), !butState ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boxTitle\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: task,\n          onChange: e => formTask(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => dispatchAddTodo(),\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => butSet(),\n          children: \"CreateSubTask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boxTitle\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: task,\n          onChange: e => formTask(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => dispatchAddTodoSlave(),\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: () => butSet(),\n          children: \"DeleteAllSubTask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), subList === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [console.log(\"inside true sublist\"), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"boxTitle\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: subT,\n            onChange: e => formSubt(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: () => addSubTask(),\n            children: \"submit step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [Object.keys(subList).map(input => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"boxTitle\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              readOnly: true,\n              value: subList[input].step\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: () => deleteSubTask(subList[input]),\n              children: \"Delete Step\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"boxTitle\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            value: subT,\n            onChange: e => formSubt(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttonBox\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: () => addSubTask(),\n            children: \"submit step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 22\n  }, this);\n\n  return container;\n};\n\n_s(CreateTask, \"uhWqFGmYGJbDw6Stu7yPDD6YDLQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreateTask;\nexport default CreateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTask\");","map":{"version":3,"sources":["/Users/cait02/Desktop/Begin/React/todo-list/src/components/createTask.js"],"names":["Component","useState","useEffect","useDispatch","useSelector","addTodo","addTodoSlave","getTask","postTaskSteps","postTask","CreateTask","props","task","setTask","subT","setSubT","subList","setSubList","butState","setButState","dispatch","testState","state","console","log","date","Date","taskDate","getMonth","getDate","getFullYear","formTask","e","target","value","formSubt","addSubTask","step","dateBS","completedS","dispatchAddTodo","dispatchAddTodoSlave","category","butSet","deleteSubTask","input","newSubList","Object","keys","reduce","object","helper","container","closeModal","map"],"mappings":"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","sourcesContent":["import { Component, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addTodo, addTodoSlave, getTask, postTaskSteps } from \"../redux/actions\"\nimport { postTask } from \"../redux/actions\";\nimport '../css/modal.css'\n\nconst CreateTask = (props) => {\n    const [task, setTask] = useState(null)\n    const [subT, setSubT] = useState(null)\n    const [subList, setSubList] = useState(\"\")\n    const [butState, setButState] = useState(false)\n    const dispatch = useDispatch()\n    const testState = useSelector(state => state)\n    console.log(\"testState\", testState)\n    const date = new Date()\n    const taskDate = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n\n    const formTask = (e) => {\n        console.log(\"target\", e.target.value)\n        setTask(e.target.value)\n        console.log(\"target\", task)\n\n    }\n\n\n    const formSubt = (e) => {\n        setSubT(e.target.value)\n        console.log(\"subT\", subT)\n    }\n\n    //Add a subTASK to subList with two conditions when it is the first subtask to be added and then where thre is not the first one\n    const addSubTask = () => {\n\n        if (subList === null) {\n            setSubList({\n                [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"if addSubTask\", subList)\n            setSubT(\"\")\n            console.log(\"ifsubt\", subT)\n\n        }\n\n        else {\n            console.log(\"else\", subT)\n            console.log(\"else addSubTask\", subList)\n            setSubList({\n                ...subList, [subT]: {\n                    step: subT,\n                    dateBS: taskDate,\n                    completedS: 0\n                }\n            })\n            console.log(\"subList\", subList)\n            setSubT(\"\")\n\n        }\n\n\n\n\n    }\n\n    const dispatchAddTodo = () => {\n        dispatch(addTodo(task, taskDate))\n        dispatch(postTask(task, taskDate))\n        dispatch(getTask())\n    }\n    //Set state for task and subList to null\n    const dispatchAddTodoSlave = () => {\n        dispatch(addTodoSlave(props.category, task, subList, taskDate))\n        dispatch(postTaskSteps(props.category, task, taskDate, subList))\n        setTask(\"\");\n        setSubList(\"\");\n        setButState(false)\n    }\n    const butSet = () => {\n        setButState(!butState)\n\n    }\n    //When user deletes subStep perform a reducer on the sublist obj, save it on a newSublist const and set it to subList\n    const deleteSubTask = (input) => {\n        console.log(\"deleting step\", input)\n        const newSubList = Object.keys(subList).reduce((object, helper) => {\n            if (subList[helper] !== input) {\n                console.log(\"sublist\", subList[helper])\n                object[helper] = subList[helper]\n            }\n            return object\n        }, {}\n        )\n        console.log(\"newSubList\", newSubList)\n        setSubList(newSubList)\n        console.log(\"subListFromDelete\", subList)\n    }\n\n    let container = (<div className=\"box\">\n        <div className=\"close-icon\" onClick={props.closeModal}>X</div>\n        {!butState ? <>\n            <div className=\"boxTitle\">\n                <input value={task} onChange={(e) => formTask(e)}></input>\n            </div>\n            <div className=\"buttonBox\">\n                <button type='submit' onClick={() => dispatchAddTodo()}>Add Task</button>\n                <button type=\"submit\" onClick={() => butSet()}>CreateSubTask</button>\n            </div>\n\n        </>\n            :\n            <>\n                <div className=\"boxTitle\">\n                    <input value={task} onChange={(e) => formTask(e)}></input>\n                </div>\n                <div className=\"buttonBox\">\n                    <button type='submit' onClick={() => dispatchAddTodoSlave()}>Add Task</button>\n                    <button type=\"submit\" onClick={() => butSet()}>DeleteAllSubTask</button>\n                </div>\n                {subList === null ?\n                    <>\n                        {console.log(\"inside true sublist\")}\n                        <div className=\"boxTitle\">\n                            <input value={subT} onChange={(e) => formSubt(e)}></input>\n                            <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                        </div>\n\n                    </>\n                    :\n                    <>\n                        {Object.keys(subList).map(input => <>\n                            <div className=\"boxTitle\">\n                                <input readOnly value={subList[input].step}></input>\n                                <button type=\"submit\" onClick={() => deleteSubTask(subList[input])}>Delete Step</button>\n                            </div>\n                        </>)}\n                        <div className=\"boxTitle\">\n                            <input value={subT} onChange={(e) => formSubt(e)}></input>\n                        </div>\n                        <div className=\"buttonBox\">\n                            <button type=\"submit\" onClick={() => addSubTask()}>submit step</button>\n                        </div>\n                    </>\n                }\n\n            </>}\n\n\n        <br></br>\n\n    </div>)\n\n    return container\n\n\n}\n\nexport default CreateTask"]},"metadata":{},"sourceType":"module"}