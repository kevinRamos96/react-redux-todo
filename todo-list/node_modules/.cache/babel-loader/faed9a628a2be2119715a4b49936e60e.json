{"ast":null,"code":"import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toogleShow } from \"../redux/actions\";\n\nconst taskCompletion = (parent, child) => {\n  let index = 0,\n      counter = 1,\n      result = 0;\n  Object.keys(child).map(input => {\n    //index counts the number of steps, while counter the number of completed steps\n    index = index + 1;\n    /** We know that every time we dispatch we have completed a step therfore we need to\n     * take in account that our counter(steps completed) should start in 1 however it\n     * cannot exceeed the length of the number steps therefore we set the counter to be \n     * less than the number of steps if not on the last render it will make the widht >100%\n     */\n\n    if (child[input].completedS > 0 && counter < Object.keys(child).length) {\n      counter = counter + 1;\n      console.log(\"result for counter\", counter);\n    }\n  });\n\n  if (counter > 0) {\n    result = counter / index;\n    console.log(\"result for new state\", result);\n    return result;\n  }\n\n  console.log(\"result for index\", index);\n  console.log(\"result for new state\", result); //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n  //we need to account for it by doing 1(completedtask)/index(number of steps)\n};\n\nexport default taskCompletion;","map":{"version":3,"sources":["/Users/cait02/Desktop/Begin/React/todo-list/src/components/taskCompletion.js"],"names":["Component","useState","useDispatch","useSelector","toogleShow","taskCompletion","parent","child","index","counter","result","Object","keys","map","input","completedS","length","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtC,MAAIC,KAAK,GAAG,CAAZ;AAAA,MAAeC,OAAO,GAAG,CAAzB;AAAA,MAA4BC,MAAM,GAAG,CAArC;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,GAAnB,CAAuBC,KAAK,IAAI;AAC5B;AACAN,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA;AACR;AACA;AACA;AACA;;AACQ,QAAID,KAAK,CAACO,KAAD,CAAL,CAAaC,UAAb,GAA0B,CAA1B,IAA+BN,OAAO,GAAGE,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBS,MAAhE,EAAwE;AACpEP,MAAAA,OAAO,GAAIA,OAAO,GAAG,CAArB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCT,OAAlC;AAEH;AACJ,GAbD;;AAcA,MAAIA,OAAO,GAAG,CAAd,EAAiB;AACbC,IAAAA,MAAM,GAAID,OAAO,GAAGD,KAApB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCR,MAApC;AACA,WAAOA,MAAP;AACH;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCV,KAAhC;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCR,MAApC,EAvBsC,CAwBtC;AACA;AACH,CA1BD;;AA4BA,eAAeL,cAAf","sourcesContent":["import { Component, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { toogleShow } from \"../redux/actions\"\n\nconst taskCompletion = (parent, child) => {\n    let index = 0, counter = 1, result = 0\n    Object.keys(child).map(input => {\n        //index counts the number of steps, while counter the number of completed steps\n        index = index + 1\n        /** We know that every time we dispatch we have completed a step therfore we need to\n         * take in account that our counter(steps completed) should start in 1 however it\n         * cannot exceeed the length of the number steps therefore we set the counter to be \n         * less than the number of steps if not on the last render it will make the widht >100%\n         */\n        if (child[input].completedS > 0 && counter < Object.keys(child).length) {\n            counter = (counter + 1)\n            console.log(\"result for counter\", counter)\n\n        }\n    })\n    if (counter > 0) {\n        result = (counter / index)\n        console.log(\"result for new state\", result)\n        return result\n    }\n    console.log(\"result for index\", index)\n\n    console.log(\"result for new state\", result)\n    //base case when taskCompletion gets called we assumed that 1 step was already completed therefore\n    //we need to account for it by doing 1(completedtask)/index(number of steps)\n}\n\nexport default taskCompletion"]},"metadata":{},"sourceType":"module"}